# pylint: disable=logging-fstring-interpolation"""HD2 Sync ToolThis script is designed to synchronize the files of the Hidden & Dangerous 2 game with a specificGitHub repository.It checks for version updates, synchronizes necessary files, and provides a user interface formanual file checking and installation.The script supports two modes of operation:1. Automatic mode: Triggered when the game is launched via an .asi file. (planned in future)2. Manual mode: Provides a console menu for checking files and installing updates.Requirements:- Python 3.12+Author: Matro"""import asyncioimport ctypesimport loggingimport osimport sysimport webbrowserimport aiohttpfrom src.check import check_internet_connection, check_game_executable, \    delete_empty_foldersfrom src.files import download_files, delete_filesfrom src.local_version import (save_local_version, fetch_cmp_version, print_versions,                               fetch_max_version, check_latest_version)from src.git_functions import fetch_tree_contentsfrom src.max_mod import install_max_mod, uninstall_max_mod# ConstantsFOLDERS_TO_CHECK = ['Maps', 'Models', 'Sounds', 'Missions', 'Scripts', 'Text', 'cmp_optional']MODS = {'CMP': 'Coop Map Package', 'Mods by Max': 'Texture and Sounds mods by Max'}async def install_cmp(cmp_version: str) -> None:    """    Install CMP files from the repository.    This function checks and downloads all necessary files from the repository.    """    print('Installing Coop Map Package (CMP)')    url = 'https://api.github.com/repos/ehylla93/had2-cmp/git/trees/main'    raw_base_url = 'https://raw.githubusercontent.com/ehylla93/had2-cmp/main'    async with aiohttp.ClientSession() as session:        files_to_download = []        for folder in FOLDERS_TO_CHECK:            folder_local_path = os.path.join(os.getcwd(), folder)            if not os.path.exists(folder_local_path):                print(f'Created new folder {folder_local_path}')                os.makedirs(folder_local_path)            await fetch_tree_contents(url, session, folder, folder_local_path,                                      files_to_download, raw_base_url=raw_base_url)        if files_to_download:            logging.info(f"Downloading {len(files_to_download)} files...")            await download_files(session, files_to_download)        else:            print("No new or updated files to download.")            logging.info("No new or updated files to download.")        save_local_version(cmp_version)        print(f"Synchronization complete. CMP is now at version {cmp_version}." + '\n')        logging.info(f"Synchronization complete. CMP is now at version {cmp_version}.")    await menu()async def uninstall_cmp() -> None:    """    Uninstall CMP files.    This function checks and deletes all files from game folder equal to files from repository.    """    print('Uninstalling Coop Map Package (CMP)')    url = 'https://api.github.com/repos/ehylla93/had2-cmp/git/trees/main'    async with aiohttp.ClientSession() as session:        files_to_delete = []        for folder in FOLDERS_TO_CHECK:            folder_local_path = os.path.join(os.getcwd(), folder)            if not os.path.exists(folder_local_path):                continue            await fetch_tree_contents(url, session, folder, folder_local_path, files_to_delete,                                      is_delete=True)        if files_to_delete:            logging.info(f"Deleting {len(files_to_delete)} files...")            await delete_files(files_to_delete)            save_local_version(None)            msg = "CMP uninstalled."            print(msg + '\n')            logging.info(msg)        else:            print("No files to delete.")            logging.info("No files to delete.")    for folder in FOLDERS_TO_CHECK:        folder_local_path = os.path.join(os.getcwd(), folder)        delete_empty_folders(folder_local_path)    await menu()async def main():    """    Main entry point for the script.    This function checks the version, displays the menu in manual mode,    and handles automatic updates if triggered via .asi.    """    # Setup logging    logging.basicConfig(filename='hd2_sync.log', level=logging.INFO,                        format='%(asctime)s - %(levelname)s - %(message)s')    logging.info("Starting HD2 Sync Tool.")    await check_latest_version()    check_internet_connection()    check_game_executable()    try:        tasks = [print_versions(k) for k in MODS]        await asyncio.gather(*tasks)        await menu()    except Exception as e:        logging.error(f"An error occurred: {e}")    finally:        await menu()async def menu():    """    Console application menu    """    msg = ("0. Go to GitHub page" + '\n' + "1. Install Coop Map Package | -1. Uninstall CMP" + '\n'           + '2. Install Texture and Sounds mods by Max | -2. Uninstall mods pack' + '\n')    repo_version_cmp = await fetch_cmp_version()    repo_version_max = await fetch_max_version()    while True:        print(msg)        choice = input("Choose an option: ")        if choice == '0':            print("Opening GitHub page...")            webbrowser.open("https://github.com/DarkMatro/HD2_mod_installer")        elif choice == '1':            if ask_again(f"install {MODS['CMP']}"):                await install_cmp(repo_version_cmp)        elif choice == '-1':            if ask_again(f"uninstall {MODS['CMP']}"):                await uninstall_cmp()        elif choice == '2':            if ask_again(f"install {MODS['Mods by Max']}"):                is_rus = input("Install additions for Russian version?: y/n: ").lower() == 'y'                await install_max_mod(repo_version_max, is_rus)        elif choice == '-2':            if ask_again(f"uninstall {MODS['Mods by Max']}"):                await uninstall_max_mod()        else:            print("Invalid choice. Please try again.")def ask_again(msg: str) -> bool:    """    Ask 'are you sure' before action    Parameters    ----------    msg : str        additional info    Returns    ----------    out : bool        Continue or not    """    choice = input(f"'Are you sure to {msg}? y/n': ")    if choice.lower() == 'y':        return True    return Falsedef is_admin():    """    Checks if the script is running as administrator.    """    try:        return ctypes.windll.shell32.IsUserAnAdmin()    except:        return Falsedef run_as_admin():    """    Restarts the script with administrator rights.    """    if is_admin():        return    try:        # Запускает этот скрипт с правами администратора        ctypes.windll.shell32.ShellExecuteW(            None, "runas", sys.executable, ' '.join(sys.argv), None, 1)        sys.exit(1)    except Exception as e:        print(f"Error: {e}")        logging.error(e)        sys.exit(1)if __name__ == "__main__":    run_as_admin()    asyncio.run(main())